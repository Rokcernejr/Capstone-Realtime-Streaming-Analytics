version : '2'

services:
  twitter:
    build:
      context: ./data-producers
    container_name: twitter_01
    ports:
      - "9999:9999"
    volumes:
      - ./data-producers/Twitter:/home/ds
    command: python twitter.py
    environment:
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - CONSUMER_KEY=${CONSUMER_KEY}
      - CONSUMER_SECRET=${CONSUMER_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
    depends_on:
      - manager

  iex:
    build:
      context: ./data-producers
    container_name: iex_01
    ports:
      - "8888:8888"
    volumes:
      - ./data-producers/IEX:/home/ds
    command: python IEX.py
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
    depends_on:
      - manager

  manager:
    build:
      context: ./data-producers
    container_name: manager_01
    ports:
      - "7777:7777"
    volumes:
      - ./data-producers/Manager:/home/ds
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PWD=${DB_PWD}
    command: python manager.py
    depends_on:
      - data_store

  data_store:
    image: redis:alpine


  db:
    restart: always
    image: mysql:5.6.36
    container_name: mysqldb_01
    volumes:
      - ./data-producers/db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT}"
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_USER: "${DB_USER}"
      MYSQL_PASSWORD: "${DB_PWD}"
    ports:
      - "${DB_PORT}:${DB_PORT}"
    expose:
      - "${DB_PORT}"
